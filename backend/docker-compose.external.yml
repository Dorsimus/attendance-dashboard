version: '3.8'

services:
  # Main application
  attendance-dashboard:
    build: .
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - MANAGER_USERNAME=${MANAGER_USERNAME}
      - MANAGER_PASSWORD=${MANAGER_PASSWORD}
      - HOST=0.0.0.0
      - PORT=8000
      - SESSION_COOKIE_SECURE=true
      - SESSION_COOKIE_HTTPONLY=true
      - SESSION_COOKIE_SAMESITE=Lax
      # Database connection (for future use)
      - DATABASE_URL=${DATABASE_URL:-sqlite:///data/attendance.db}
    volumes:
      - attendance_data:/app/data
      - attendance_uploads:/app/uploads
      - attendance_logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - attendance-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.attendance.rule=Host(`attendance.redstoneintelligence.com`)"
      - "traefik.http.routers.attendance.tls=true"
      - "traefik.http.routers.attendance.tls.certresolver=letsencrypt"
      - "traefik.http.services.attendance.loadbalancer.server.port=8000"
      # Security headers
      - "traefik.http.routers.attendance.middlewares=security-headers"
      - "traefik.http.middlewares.security-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.security-headers.headers.customrequestheaders.X-Forwarded-Port=443"
      - "traefik.http.middlewares.security-headers.headers.sslredirect=true"
      - "traefik.http.middlewares.security-headers.headers.stsincludesubdomains=true"
      - "traefik.http.middlewares.security-headers.headers.stspreload=true"
      - "traefik.http.middlewares.security-headers.headers.stsseconds=31536000"

  # Reverse proxy with SSL
  traefik:
    image: traefik:v3.0
    command:
      - "--api.dashboard=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--log.level=INFO"
      - "--accesslog=true"
      - "--accesslog.filepath=/var/log/traefik/access.log"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "letsencrypt_data:/letsencrypt"
      - "traefik_logs:/var/log/traefik"
    restart: unless-stopped
    networks:
      - attendance-network
    depends_on:
      - attendance-dashboard

  # Optional: Database for scalability
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_DB=attendance_db
      - POSTGRES_USER=attendance_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - attendance-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U attendance_user -d attendance_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Redis for caching and sessions
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - attendance-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Monitoring
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: unless-stopped
    networks:
      - attendance-network

networks:
  attendance-network:
    driver: bridge

volumes:
  attendance_data:
    driver: local
  attendance_uploads:
    driver: local
  attendance_logs:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  letsencrypt_data:
    driver: local
  traefik_logs:
    driver: local
  prometheus_data:
    driver: local
